import sbt.Keys._
import sbt.{Def, _}
import sbtghactions.GenerativePlugin
import sbtghactions.GenerativePlugin.autoImport._
import CoursierWorkflow.autoImport._

import java.io.{BufferedWriter, FileWriter}
import scala.io.Source

object ReleaseWorkflow extends AutoPlugin {
  override def requires: Plugins = GenerativePlugin && CoursierWorkflow

  object autoImport {
    val checkWorkflows = settingKey[WorkflowStep]("sbt githubWorkflowCheck step")
  }
  import autoImport._

  private val workflowsDirTask = Def task {
    val githubDir    = baseDirectory.value / ".github"
    val workflowsDir = githubDir / "workflows"

    if (!githubDir.exists()) {
      githubDir.mkdir()
    }

    if (!workflowsDir.exists()) {
      workflowsDir.mkdir()
    }

    workflowsDir
  }

  private val releaseYmlFile = Def task {
    workflowsDirTask.value / "release.yml"
  }

  private val generateReleaseContents = Def task {
    def indent(output: String, level: Int): String = {
      val space = (0 until level * 2).map(_ => ' ').mkString
      (space + output.replace("\n", s"\n$space")).replaceAll("""\n[ ]+\n""", "\n\n")
    }
    val releaseJob        = githubWorkflowGeneratedCI.value.find(_.id == "publish").orNull
    val updatedReleaseJob = releaseJob.copy(cond = None)
    val updateReadmeJob = WorkflowJob(
      "readme",
      "Update Readme",
      oses = githubWorkflowOSes.value.headOption.toList,
      scalas = Keys.crossScalaVersions.value.headOption.toList,
      javas = githubWorkflowJavaVersions.value.headOption.toList,
      needs = List("publish"),
      steps = WorkflowStep.Checkout ::
        coursierSetup.value ::
        coursierCache.value ::
        checkWorkflows.value ::
        Sbtn(
          name = Some("Generate updated README.md"),
          commands = List("docs/mdoc --out .")
        )
        ::
        WorkflowStep.Use(
          "EndBug",
          "add-and-commit",
          "v5",
          params = Map(
            "message" -> "Update readme for released version",
            "add"     -> "README.md",
            "ref"     -> "master"
          )
        )
        :: Nil
    )

    val jobs = updatedReleaseJob :: updateReadmeJob :: Nil

    s"""# This file was automatically generated by sbt-github-actions using the
# githubWorkflowGenerate task. You should add and commit this file to
# your git repository. It goes without saying that you shouldn't edit
# this file by hand! Instead, if you wish to make changes, you should
# change your sbt build configuration to revise the workflow description
# to meet your needs, then regenerate this file.

name: Release

on:
  release:
    types: [published]

jobs:
${indent(jobs.map(GenerativePlugin.compileJob(_, githubWorkflowSbtCommand.value)).mkString("\n\n"), 1)}"""
  }

  override def buildSettings: Seq[Def.Setting[_]] = Seq(
    checkWorkflows := WorkflowStep.Run(
      s"${githubWorkflowSbtCommand.value} githubWorkflowCheck" :: Nil,
      name = Some("Check that workflows are up to date")
    )
  )

  override def projectSettings: Seq[Def.Setting[_]] = Seq(
    githubWorkflowGenerate := {
      githubWorkflowGenerate.value
      val releaseContent = generateReleaseContents.value
      val releaseYml     = releaseYmlFile.value
      val releaseWriter  = new BufferedWriter(new FileWriter(releaseYml))
      try {
        releaseWriter.write(releaseContent)
      } finally {
        releaseWriter.close()
      }
    },
    githubWorkflowCheck := {
      githubWorkflowCheck.value
      val expectedReleaseContents = generateReleaseContents.value

      val releaseYml = releaseYmlFile.value

      val releaseSource = Source.fromFile(releaseYml)
      val actualReleaseContents =
        try {
          releaseSource.getLines().mkString("\n")
        } finally {
          releaseSource.close()
        }

      if (expectedReleaseContents != actualReleaseContents) {
        sys.error(
          "release.yml does not contain contents that would have been generated by sbt-github-actions; try running githubWorkflowGenerate"
        )
      }
    }
  )
}
